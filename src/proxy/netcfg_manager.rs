//! # DBus interface proxy for: `net.openvpn.v3.netcfg`
//!
//! This code was generated by `zbus-xmlgen` `3.1.0` from DBus introspection data.
//! Source: `net.openvpn.v3.netcfg_service.xml`.

use enumflags2::BitFlags;
use std::fmt;
use zbus::dbus_proxy;

use crate::constants::{LogCategory, LogGroup, LogLevel, NetworkChangeEventFilterFlags};

#[dbus_proxy(
    interface = "net.openvpn.v3.netcfg",
    default_service = "net.openvpn.v3.netcfg",
    default_path = "/net/openvpn/v3/netcfg"
)]
trait NetCfgManager {
    /// Cleanup method
    fn cleanup(&self) -> zbus::Result<()>;

    /// CreateVirtualInterface method
    fn create_virtual_interface(
        &self,
        device_name: &str,
    ) -> zbus::Result<zbus::zvariant::OwnedObjectPath>;

    /// DcoAvailable method
    fn dco_available(&self) -> zbus::Result<bool>;

    /// FetchInterfaceList method
    fn fetch_interface_list(&self) -> zbus::Result<Vec<zbus::zvariant::OwnedObjectPath>>;

    /// NotificationSubscribe method
    fn notification_subscribe(
        &self,
        filter: BitFlags<NetworkChangeEventFilterFlags>,
    ) -> zbus::Result<()>;

    /// NotificationSubscriberList method
    fn notification_subscriber_list(
        &self,
    ) -> zbus::Result<Vec<(String, NetworkChangeEventFilterFlags)>>;

    /// NotificationUnsubscribe method
    fn notification_unsubscribe(&self, optional_subscriber: &str) -> zbus::Result<()>;

    /// ProtectSocket method
    fn protect_socket(
        &self,
        remote: &str,
        ipv6: bool,
        device_path: &zbus::zvariant::ObjectPath<'_>,
    ) -> zbus::Result<bool>;

    /// Log signal
    #[dbus_proxy(signal)]
    fn log(&self, group: LogGroup, category: LogCategory, message: &str) -> zbus::Result<()>;

    /// config_file property
    #[dbus_proxy(property, name = "config_file")]
    fn config_file(&self) -> zbus::Result<String>;

    /// global_dns_search property
    #[dbus_proxy(property, name = "global_dns_search")]
    fn global_dns_search(&self) -> zbus::Result<u32>;

    /// global_dns_servers property
    #[dbus_proxy(property, name = "global_dns_servers")]
    fn global_dns_servers(&self) -> zbus::Result<u32>;

    /// log_level property
    #[dbus_proxy(property, name = "log_level")]
    fn log_level(&self) -> zbus::Result<LogLevel>;
    fn set_log_level(&self, value: LogLevel) -> zbus::Result<()>;

    /// version property
    #[dbus_proxy(property, name = "version")]
    fn version(&self) -> zbus::Result<String>;
}

impl fmt::Display for LogArgs<'_> {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        write!(
            f,
            "[{}] ({}) - {}",
            self.category(),
            self.group(),
            self.message()
        )
    }
}
