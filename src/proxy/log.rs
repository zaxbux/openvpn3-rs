//! # DBus interface proxy for: `net.openvpn.v3.log`
//!
//! This code was generated by `zbus-xmlgen` `3.1.0` from DBus introspection data.
//! Source: `net.openvpn.v3.log.xml`.
//!
//! You may prefer to adapt it, instead of using it verbatim.
//!
//! More information can be found in the
//! [Writing a client proxy](https://dbus.pages.freedesktop.org/zbus/client.html)
//! section of the zbus documentation.
//!
//! This DBus object implements
//! [standard DBus interfaces](https://dbus.freedesktop.org/doc/dbus-specification.html),
//! (`org.freedesktop.DBus.*`) for which the following zbus proxies can be used:
//!
//! * [`zbus::fdo::PropertiesProxy`]
//! * [`zbus::fdo::IntrospectableProxy`]
//! * [`zbus::fdo::PeerProxy`]
//!
//! â€¦consequently `zbus-xmlgen` did not generate code for the above interfaces.

use zbus::dbus_proxy;

#[dbus_proxy(interface = "net.openvpn.v3.log", assume_defaults = true)]
trait Log {
    /// AssignSession method
    fn assign_session(
        &self,
        session_path: &zbus::zvariant::ObjectPath<'_>,
        interface: &str,
    ) -> zbus::Result<()>;

    /// Attach method
    fn attach(&self, interface: &str) -> zbus::Result<()>;

    /// Detach method
    fn detach(&self, interface: &str) -> zbus::Result<()>;

    /// GetSubscriberList method
    fn get_subscriber_list(&self) -> zbus::Result<Vec<(String, String, String, String)>>;

    /// ProxyLogEvents method
    fn proxy_log_events(
        &self,
        target_address: &str,
        session_path: &zbus::zvariant::ObjectPath<'_>,
    ) -> zbus::Result<zbus::zvariant::OwnedObjectPath>;

    /// config_file property
    #[dbus_proxy(property, name = "config_file")]
    fn config_file(&self) -> zbus::Result<String>;

    /// log_dbus_details property
    #[dbus_proxy(property, name = "log_dbus_details")]
    fn log_dbus_details(&self) -> zbus::Result<bool>;
    fn set_log_dbus_details(&self, value: bool) -> zbus::Result<()>;

    /// log_level property
    #[dbus_proxy(property, name = "log_level")]
    fn log_level(&self) -> zbus::Result<u32>;
    fn set_log_level(&self, value: u32) -> zbus::Result<()>;

    /// log_method property
    #[dbus_proxy(property, name = "log_method")]
    fn log_method(&self) -> zbus::Result<String>;

    /// log_prefix_logtag property
    #[dbus_proxy(property, name = "log_prefix_logtag")]
    fn log_prefix_logtag(&self) -> zbus::Result<bool>;
    fn set_log_prefix_logtag(&self, value: bool) -> zbus::Result<()>;

    /// num_attached property
    #[dbus_proxy(property, name = "num_attached")]
    fn num_attached(&self) -> zbus::Result<u32>;

    /// timestamp property
    #[dbus_proxy(property, name = "timestamp")]
    fn timestamp(&self) -> zbus::Result<bool>;
    fn set_timestamp(&self, value: bool) -> zbus::Result<()>;

    /// version property
    #[dbus_proxy(property, name = "version")]
    fn version(&self) -> zbus::Result<String>;
}
